terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = ">= 3.68.0"
    }
  }
  required_version = ">= 0.10.0"
}

provider "aws" {
  region = "us-west-2" # change this to your desired AWS region
}

variable "vm_config" {
  type = map(object({
    name               = string
    windows_version    = string
    private_ip_address = string
  }))

  default = {
    "dc01" = {
      name               = "dc01"
      windows_version    = "2019-Datacenter"
      private_ip_address = "192.168.56.10"
    }
    "dc02" = {
      name               = "dc02"
      windows_version    = "2019-Datacenter"
      private_ip_address = "192.168.56.11"
    }
    "dc03" = {
      name               = "dc03"
      windows_version    = "2016-Datacenter"
      private_ip_address = "192.168.56.12"
    }
    "srv02" = {
      name               = "srv02"
      windows_version    = "2019-Datacenter"
      private_ip_address = "192.168.56.22"
    }
    "srv03" = {
      name               = "srv03"
      windows_version    = "2016-Datacenter"
      private_ip_address = "192.168.56.23"
    }
  }
}

resource "aws_network_interface" "goad-vm-nic" {
  for_each = var.vm_config

  description     = "goad-vm-${each.value.name}-nic"
  subnet_id       = aws_subnet.subnet.id
  private_ips     = [each.value.private_ip_address]
  security_groups = [aws_security_group.example_sg.id] # Assuming you have a security group defined somewhere
}

resource "aws_instance" "goad-vm" {
  for_each = var.vm_config

  ami           = data.aws_ami.windows.id # Assuming you fetch the Windows AMI in your configuration
  instance_type = var.size
  key_name      = var.key_name # Assuming you have a key pair defined
  subnet_id     = aws_subnet.subnet.id

  network_interface {
    network_interface_id = aws_network_interface.goad-vm-nic[each.key].id
    device_index         = 0
  }

  user_data = <<-EOT
                <powershell>
                Invoke-WebRequest -Uri "https://raw.githubusercontent.com/ansible/ansible/38e50c9f819a045ea4d40068f83e78adbfaf2e68/examples/scripts/ConfigureRemotingForAnsible.ps1" -OutFile "ConfigureRemotingForAnsible.ps1"
                powershell -ExecutionPolicy Unrestricted -File ConfigureRemotingForAnsible.ps1
                </powershell>
              EOT

  tags = {
    Name = "goad-vm-${each.value.name}"
  }
}

# The `data.aws_ami.windows` is used to fetch the appropriate AMI ID for the Windows version
data "aws_ami" "windows" {
  most_recent = true

  filter {
    name   = "name"
    values = ["Windows_Server-${each.value.windows_version}*_English_Full_Base"] # Adjust this as per your exact naming convention on AWS
  }

  owners = ["amazon"] # AWS owner for public Windows AMIs
}
